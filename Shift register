library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 

entity usr is 
    Port( 
        clk, rst : in std_logic; 
        s : in std_logic_vector(3 downto 0); 
        m : in std_logic_vector(1 downto 0); 
        y : out std_logic_vector(3 downto 0) 
    ); 
end usr; 

architecture Behavioral of usr is 
    signal t : std_logic_vector(3 downto 0); 
begin 
    process(clk, rst) 
    begin 
        if rst = '1' then 
            y <= "0000"; 
        elsif clk'event and clk = '1' then 
            case m is 
                when "00" => 
                    t(3) <= s(0); 
                    t(2) <= t(3); 
                    t(1) <= t(2); 
                    t(0) <= t(1); 
                    y(0) <= t(0); 
                when "01" => 
                    t(3) <= s(0); 
                    t(2) <= t(3); 
                    t(1) <= t(2); 
                    t(0) <= t(1); 
                    y <= t; 
                when "10" => 
                    t <= s; 
                    y <= t; 
                when "11" => 
                    t <= s; 
                    t(2) <= t(3); 
                    t(1) <= t(2); 
                    t(0) <= t(1); 
                    y(3) <= t(0); 
                when others => NULL; 
            end case; 
        end if; 
    end process; 
end Behavioral;

************************************************************

LIBRARY ieee; 
USE ieee.std_logic_1164.ALL; 

ENTITY usr2_tb IS 
END usr2_tb; 

ARCHITECTURE behavior OF usr2_tb IS 
    COMPONENT usr 
        PORT( 
            clk : IN std_logic; 
            rst : IN std_logic; 
            s : IN std_logic_vector(3 downto 0); 
            m : IN std_logic_vector(1 downto 0); 
            y : OUT std_logic_vector(3 downto 0) 
        ); 
    END COMPONENT; 
    
    signal clk : std_logic := '0'; 
    signal rst : std_logic := '0'; 
    signal s : std_logic_vector(3 downto 0) := (others => '0'); 
    signal m : std_logic_vector(1 downto 0) := (others => '0'); 
    signal y : std_logic_vector(3 downto 0); 
    constant clk_period : time := 10 ns; 
BEGIN 
    uut: usr PORT MAP ( 
        clk => clk, 
        rst => rst, 
        s => s, 
        m => m, 
        y => y 
    ); 

    clk_process : process 
    begin 
        clk <= '0'; 
        wait for clk_period/2; 
        clk <= '1'; 
        wait for clk_period/2; 
    end process; 

    stim_proc: process 
    begin 
        wait for 10 ns; 
        rst <= '1'; 
        wait for 10 ns; 
        rst <= '0'; 
        wait for 20 ns; 
        m <= "00"; 
        s <= "UUU1"; 
        wait for 80 ns; 
        s <= "111U"; 
        wait for 80 ns; 
        s <= "---0"; 
        wait for 80 ns; 
        m <= "01"; 
        s <= "0U0-"; 
        wait for 80 ns; 
        s <= "U001"; 
        wait for 80 ns; 
        s <= "-110"; 
        wait for 80 ns; 
        m <= "10"; 
        s <= "1010"; 
        wait for 70 ns; 
        s <= "0U01"; 
        wait for 70 ns; 
        s <= "1-00"; 
        wait for 70 ns; 
        m <= "11"; 
        s <= "U000"; 
        wait for 80 ns; 
        s <= "1010"; 
        wait for 80 ns; 
        s <= "-111"; 
        wait for 80 ns; 
        wait; 
    end process; 
END;

*******************************************
NET "clk" LOC = P53; 
NET "rst" LOC = P54; 
NET "s<0>" LOC = P10; 
NET "s<1>" LOC = P11; 
NET "s<2>" LOC = P12; 
NET "s<3>" LOC = P13; 
NET "m<0>" LOC = P20; 
NET "m<1>" LOC = P21; 
NET "y<0>" LOC = P30; 
NET "y<1>" LOC = P31; 
NET "y<2>" LOC = P32; 
NET "y<3>" LOC = P33;
